import { respondToInvalidSessionToken } from './respond-to-invalid-session-token.mjs';
import { getShopFromRequest } from './get-shop-from-request.mjs';

async function validateSessionToken(params, request, token, { checkAudience = true } = {}) {
    const { api, logger } = params;
    logger.debug('Validating session token', { shop: getShopFromRequest(request) });
    try {
        const payload = await api.session.decodeSessionToken(token, {
            checkAudience,
        });
        const dest = new URL(payload.dest);
        const shop = dest.hostname;
        logger.debug('Session token is valid - validated', {
            shop,
            payload: JSON.stringify(payload),
        });
        return payload;
    }
    catch (error) {
        logger.debug(`Failed to validate session token: ${error.message}`, {
            shop: getShopFromRequest(request),
        });
        throw respondToInvalidSessionToken({ params, request, retryRequest: true });
    }
}

export { validateSessionToken };
//# sourceMappingURL=validate-session-token.mjs.map
